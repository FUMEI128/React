{"version":3,"sources":["Input.js","List.js","Todolist.js","index.js"],"names":["Input","props","console","log","this","ref","refs","value","type","onChange","handInputChange","bind","placeholder","onClick","btnEvent","React","Component","List","renderTodos","done","data","map","todo","idx","key","toggleEvent","checked","title","delEvent","arr1","filter","item","arr2","className","style","length","Control","handleChange","e","setState","inpValue","target","clickButton","state","todos","alert","delButton","index","localStorage","setItem","JSON","stringify","toggle","newTodos","input","focus","getItem","parse","inp","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.7046a1a6.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nclass Input extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    render(){\r\n        console.log(this.props);\r\n        return (\r\n            <div>\r\n            <input\r\n            ref={this.props.refs}\r\n            value={this.props.value}\r\n            type=\"text\"\r\n            onChange={this.props.handInputChange.bind(this)}\r\n            placeholder=\"ToDo\"/>\r\n            <button\r\n            onClick={this.props.btnEvent.bind(this)}>添加</button>\r\n            </div>\r\n        )\r\n    }\r\n}\r\nexport default Input;","import React from 'react';\r\n\r\nclass List extends React.Component{\r\n    constructor(props){\r\n        super(props);\r\n    }\r\n    renderTodos = (done) => {\r\n        return this.props.data.map((todo, idx) => {\r\n            if (done == todo.done) {\r\n                return <li key={idx}>\r\n                    <input\r\n                        onClick={() => this.props.toggleEvent(idx)}\r\n                        checked={done} type=\"checkbox\" />\r\n                    <span>{todo.title}</span>\r\n            <button onClick={() => this.props.delEvent(idx)}>删除</button>\r\n                </li>\r\n            } \r\n        })\r\n    }\r\n    render(){  \r\n        let arr1=this.props.data.filter((item)=>!item.done);\r\n        let arr2=this.props.data.filter((item)=>item.done)\r\n        return(\r\n            <div>\r\n                  <h2 className=\"h2\" style={{}}>正在进行{arr1.length}</h2>\r\n                  <ul>{this.renderTodos(false)}</ul>\r\n\r\n                  <h2>已经完成{arr2.length}</h2>\r\n                  <ul>{this.renderTodos(true)}</ul>\r\n\r\n            </div>\r\n        )\r\n\r\n    }\r\n}\r\n//父组件通过属性值传递参数给子组件 子组件通过props属性获得值，子组件可以调用父组件的函数方法来改变父组件中的state中的值\r\nexport default List;","import React, { Component } from 'react';\r\nimport Input from './Input';\r\nimport List from './List';\r\nclass Control extends Component {\r\n    constructor() {\r\n        super();\r\n        this.state = {\r\n            inpValue: '',\r\n            todos: [\r\n                { title: '1', done: false },\r\n                { title: '2', done: true },\r\n                { title: '3', done: false },\r\n                { title: '4', done: false }\r\n            ]\r\n        }\r\n    }\r\n    handleChange = (e) => {\r\n        this.setState({ inpValue: e.target.value })\r\n    }\r\n    componentDidMount() {\r\n        this.input.focus();\r\n        let todos = localStorage.getItem('todos');\r\n        console.log(todos);\r\n        if (todos) {\r\n            this.setState({\r\n                todos: JSON.parse(todos)\r\n            })\r\n        }\r\n    }\r\n    componentDidUpdate() {\r\n        console.log(\"hellodidupdate\");\r\n        localStorage.setItem(\r\n            'todos',\r\n            JSON.stringify(this.state.todos)\r\n        )\r\n       // return true;\r\n    }\r\n    clickButton = () => {\r\n        //input组件，就是输入框中输入的值放入inpvalue中\r\n        if (this.state.inpValue !== '') {\r\n            console.log(this.state.todos);\r\n            this.setState({\r\n                inpValue:'',\r\n                todos: [\r\n                    {\r\n                        title: this.state.inpValue,\r\n                        done: false\r\n                    },\r\n                    ...this.state.todos\r\n                ]\r\n            })\r\n\r\n        }else{\r\n            alert(\"输入不能为空\");\r\n        }\r\n\r\n    }\r\n    delButton = (idx) => {\r\n        this.setState({\r\n            //tState是异步调用\r\n            todos: this.state.todos.filter((item, index) => index != idx)\r\n        }, () => {\r\n            localStorage.setItem(\r\n                'todos',\r\n                JSON.stringify(this.state.todos)\r\n            )\r\n        });\r\n\r\n    }\r\n    toggle = (index) => {\r\n        let newTodos = this.state.todos  //利用深拷贝\r\n        newTodos[index].done = !newTodos[index].done;\r\n        this.setState({\r\n            todos: newTodos\r\n        })\r\n    }\r\n    render() {\r\n        const { todos, inpValue } = this.state;\r\n        return (\r\n            <div>\r\n                <Input value={this.state.inpValue} handInputChange={this.handleChange} btnEvent={this.clickButton} refs={inp=>this.input=inp}/>\r\n                <List toggleEvent={this.toggle} \r\n                delEvent={this.delButton} \r\n                data={this.state.todos}/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n{/* npm install axios --save --registry https://registry.npm.taobao.org */}\r\nexport default Control;\r\n\r\n//// 实现带有本地存储的todolist功能（类组件实现）：\r\n// 最外层index.js里render(<TodoList/>,xx)\r\n// TodoList组件里包含Input和List两个组件\r\n// 输入框输入时不进行本地存储（使用componentDidUpdate）","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport TodoList from './Todolist';\n\n  ReactDOM.render(<TodoList/>,\n    \n    \n    document.getElementById('root'));\n\n\n\n\n\n\n\n// 实现带有本地存储的todolist功能（类组件实现）：\n\n// 最外层index.js里render(<TodoList/>,xx)\n// TodoList组件里包含Input和List两个组件\n// 输入框输入时不进行本地存储（使用componentDidUpdate）\n\n// 写完进行npm run build,将打包完的静态传到github，\n// 设置github pages，雪梨提交网页链接和四个文件的代码\n\n\n\n\n\n\n\n//alt shift +上下键  向上向下复制\n//alt +上下键盘 移动一行\n//按住 alt ,鼠标点击 可以同时操作多行\n//ctrl+shift+左右键 选中整个单词\n//ctrl+shift+L\n\n//库组件的生命周期\n//1,初始化 construtor\n//2,挂载：render（）挂载的时候就会执行\n\n\n"],"sourceRoot":""}